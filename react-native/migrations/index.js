export const data = {
  "migrations": [
    {
      "body": "/*\nElectricDB Migration\n{\"metadata\": {\"title\": \"init\", \"name\": \"1664806630_init\", \"sha256\": \"a09b508f1a21aa7d11c348fbae6dc7bdf93decef4192c394f2e44daa3d1e77b7\"}}\n*/\n\n/*---------------------------------------------\nBelow are templated triggers added by Satellite\n---------------------------------------------*/\n\n-- The ops log table\nCREATE TABLE IF NOT EXISTS _electric_oplog (\n  rowid INTEGER PRIMARY KEY AUTOINCREMENT,\n  namespace String NOT NULL,\n  tablename String NOT NULL,\n  optype String NOT NULL,\n  primaryKey String NOT NULL,\n  newRow String,\n  oldRow String,\n  timestamp TEXT\n);\n\n-- Somewhere to keep our metadata\nCREATE TABLE IF NOT EXISTS _electric_meta (\n  key TEXT,\n  value TEXT\n);\n\n-- Somewhere to track migrations\nCREATE TABLE IF NOT EXISTS _electric_migrations (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT NOT NULL UNIQUE,\n  sha256 TEXT NOT NULL,\n  applied_at TEXT NOT NULL\n);\n\n-- Initialisation of the metadata table\nINSERT INTO _electric_meta (key, value) VALUES ('compensations', 0), ('lastAckdRowId','0'), ('lastSentRowId', '0'), ('lsn', '0');\n\n\n-- These are toggles for turning the triggers on and off\nDROP TABLE IF EXISTS _electric_trigger_settings;\nCREATE TABLE _electric_trigger_settings(tablename STRING PRIMARY KEY, flag INTEGER);\n\n\n",
      "encoding": "escaped",
      "name": "1664806630_init",
      "sha256": "a09b508f1a21aa7d11c348fbae6dc7bdf93decef4192c394f2e44daa3d1e77b7",
      "title": "init"
    },
    {
      "body": "/*\nElectricDB Migration\n{\"metadata\": {\"title\": \"create_items\", \"name\": \"1664806643_create_items\", \"sha256\": \"ad0e74db76567ae78e7505f932047a5e44204563f621564a1f80ab781bebdcd9\"}}\n*/\n\nCREATE TABLE IF NOT EXISTS main.items (\n  value TEXT PRIMARY KEY\n) STRICT, WITHOUT ROWID;\n\n/*---------------------------------------------\nBelow are templated triggers added by Satellite\n---------------------------------------------*/\n\n\n-- These are toggles for turning the triggers on and off\nDROP TABLE IF EXISTS _electric_trigger_settings;\nCREATE TABLE _electric_trigger_settings(tablename STRING PRIMARY KEY, flag INTEGER);\nINSERT INTO _electric_trigger_settings(tablename,flag) VALUES ('main.items', 1);\n\n\n/* Triggers for table items */\n\n-- Ensures primary key is immutable\nDROP TRIGGER IF EXISTS update_ensure_main_items_primarykey;\nCREATE TRIGGER update_ensure_main_items_primarykey\n   BEFORE UPDATE ON main.items\nBEGIN\n  SELECT\n    CASE\n      WHEN old.value != new.value THEN\n        RAISE (ABORT,'cannot change the value of column value as it belongs to the primary key')\n    END;\nEND;\n\n-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\n\nDROP TRIGGER IF EXISTS insert_main_items_into_oplog;\nCREATE TRIGGER insert_main_items_into_oplog\n   AFTER INSERT ON main.items\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.items')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'items', 'INSERT', json_object('value', new.value), json_object('value', new.value), NULL, NULL);\nEND;\n\nDROP TRIGGER IF EXISTS update_main_items_into_oplog;\nCREATE TRIGGER update_main_items_into_oplog\n   AFTER UPDATE ON main.items\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.items')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'items', 'UPDATE', json_object('value', new.value), json_object('value', new.value), json_object('value', old.value), NULL);\nEND;\n\nDROP TRIGGER IF EXISTS delete_main_items_into_oplog;\nCREATE TRIGGER delete_main_items_into_oplog\n   AFTER DELETE ON main.items\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.items')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'items', 'DELETE', json_object('value', old.value), NULL, json_object('value', old.value), NULL);\nEND;\n\n\n\n\n",
      "encoding": "escaped",
      "name": "1664806643_create_items",
      "sha256": "ad0e74db76567ae78e7505f932047a5e44204563f621564a1f80ab781bebdcd9",
      "title": "create_items"
    }
  ]
}
